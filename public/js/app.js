/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.l = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// identity function for calling harmory imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };

/******/ 	// define getter function for harmory exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		Object.defineProperty(exports, name, {
/******/ 			configurable: false,
/******/ 			enumerable: true,
/******/ 			get: getter
/******/ 		});
/******/ 	};

/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};

/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports) {

"use strict";
eval("'use strict';\n\n$(document).ready(function($) {\n    \n\n    function __log(e, data) {\n        console.log(e + \" \" + (data || ''));\n    }\n\n    var audio_context;\n    var recorder;\n    var recording = false;\n    var $form = $('form');\n    var currAudioBlob = null;\n    var $form = $(\"form\");\n    var $submitButton = $(\"#submit\");\n    $submitButton.hide();\n\n    $form.submit(function( event ) {\n        event.preventDefault();\n        console.log(\"Post Recording\");\n        if(!currAudioBlob) {\n            console.log(\"Missing recording\");\n            return;            \n        }\n        var data = new FormData();\n        var blob = new Blob([currAudioBlob], {type: \"audio/wav\"});\n        data.append('csrf_token', $('meta[name=\"csrf_token\"]').attr('content'));\n        data.append('audio_name', moment().format('x')+\"_audio.wav\");\n        data.append('audio_file', blob);\n        $(\"form input\").each(function() {\n            data.append(this.name, $(this).val());\n        });\n\n        $.ajax({\n            url: '/submit',\n            type: 'POST',\n            dataType: 'json',\n            data: data,\n            processData: false,\n            contentType: false\n        })\n        .done(function(e) {\n            console.log(\"success\", e);\n            if(e.status > 200) {\n                document.location = '/';\n            }\n        })\n        .fail(function() {\n            console.log(\"error\");\n        })\n        .always(function() {\n            console.log(\"complete\");\n        });\n    });\n\n    // ------------------------------------------------------------------------\n    function startUserMedia(stream) {\n        var input = audio_context.createMediaStreamSource(stream);\n         __log('Media stream created.');\n\n        // Uncomment if you want the audio to feedback directly\n        //input.connect(audio_context.destination);\n        //__log('Input connected to audio context destination.');\n    \n        recorder = new Recorder(input);\n        __log('Recorder initialised.');\n    }\n\n    // ------------------------------------------------------------------------\n    try {\n        \n        // webkit shim\n        window.AudioContext = window.AudioContext || window.webkitAudioContext;\n        navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia;\n        window.URL = window.URL || window.webkitURL;\n      \n        audio_context = new AudioContext;\n\n        __log('Audio context set up.');\n        __log('navigator.getUserMedia ' + (navigator.getUserMedia ? 'available.' : 'not present!'));\n    } catch (e) {\n        console.log(\"e: \", e)\n    }\n    \n    navigator.getUserMedia({audio: true}, startUserMedia, function(e) {\n        console.log('No live audio input: ', e);\n    });\n\n    // ------------------------------------------------------------------------\n    var isRecording = false;\n    var $recordButton = $('#recording');\n    $recordButton.click(function(event) {\n        event.preventDefault();\n        console.log(currAudioBlob);\n        // start recording\n        if(!isRecording) {\n            isRecording = true;\n            recorder && recorder.record();\n            __log('Recording...');\n            $(this).html(\"Stop Recording\");\n        }\n\n        // stop recording\n        else {\n            isRecording = false;   \n            $(this).html(currAudioBlob ? \"Re-Record\" : \"Start Recording\");\n            \n            // stop\n            recorder && recorder.stop();\n            __log('Stopped recording.');\n            if(currAudioBlob) {\n                $submitButton.show();\n            }\n            submitOrRerecord();\n        }\n    });\n\n    // ------------------------------------------------------------------------\n    function submitOrRerecord() {\n\n        recorder && recorder.exportWAV(function(blob) {\n\n            currAudioBlob = blob;\n            console.log(\"audio blob!\");\n\n            var sound_url = URL.createObjectURL(currAudioBlob);\n            var audio_elt = document.createElement('audio');\n            audio_elt.controls = true;\n            audio_elt.src = sound_url;\n            audio_elt.setAttribute('data-question', $(\".record\").attr('data-question'));\n            $(\"#audio_container\").append( $(audio_elt) );\n           // $form.append( $(audio_elt) );\n            $recordButton.html(currAudioBlob ? \"Re-Record\" : \"Start Recording\");\n            if(currAudioBlob) {\n                $submitButton.show();\n            }\n            recorder.clear();\n        });\n  }\n\n});\n\n/*\n\n\n\n\n\n\n\n\n  function __log(e, data) {\n    console.log(e + \" \" + (data || ''));\n  }\n\n  var audio_context;\n  var recorder;\n  var recording=false;\n\n  function startUserMedia(stream) {\n    var input = audio_context.createMediaStreamSource(stream);\n    __log('Media stream created.');\n\n    // Uncomment if you want the audio to feedback directly\n    //input.connect(audio_context.destination);\n    //__log('Input connected to audio context destination.');\n    \n    recorder = new Recorder(input);\n    __log('Recorder initialised.');\n  }\n\nfunction toggleRecord(ev){\n    var btn = $(ev.target);\n    var spanverbiage = $(ev.target).parent().children('span').first();\n         if(btn.hasClass('notRec')){\n\n                 btn.removeClass(\"notRec\");\n                 btn.addClass(\"Rec\");\n                 // start recording now!\n                 spanverbiage.html(\"Stop\");\n                 recording = true;\n                 recorder && recorder.record();\n\n                 __log('Recording...');\n             } else {\n                 btn.removeClass(\"Rec\");\n                 btn.addClass(\"notRec\");\n\n                 spanverbiage.html(\"Re-Record\");\n\n                  // stop\n                 recording = false;\n                 recorder && recorder.stop();\n\n                 __log('Stopped recording.');\n                 // create WAV download link using audio data blob\n                 submitOrRerecord();\n\n             }\n\n     }\n     */\n\n/*\nvar Screensaver = require('./screensaver.js');\n\n$(function() {\n    /// dis nasty but trying to move fast here\n    var currAudioBlob;\n\n   //intro slide - only show 'let's go' when we're dang ready\n   var nameField = false\n   var emailField = false;\n   function testFields(keycode) { if (nameField && emailField) { \n    $(\".info button.hidden\").removeClass(\"hidden\");\n    if(keycode == 13) {\n        $.deck('next');\n    }\n    }}\n   $(\"#name-input\").keyup(function(){\n    nameField = true;\n    testFields(e.keyCode);\n   });\n   $(\"#email-input\").keyup(function(e){\n    emailField = true;\n    testFields(e.keyCode);\n   });\n   $(document).keyup(function(e) {\n     if(e.keyCode == 27) {\n        $(\"#terms\").addClass(\"hidden\");\n     }\n   })\n\n\n  \n\n    \n    $(document).bind('deck.change', function(event, from, to) {\n\t   console.log('Moving from slide ' + from + ' to ' + to);\n\n        // submit full data packets on the 'thanks' slide\n        if( $(\".deck-next\").hasClass('thanks')) {\n            // attempt to submit data\n            var question_attr = $(\".thanks.deck-next\").attr(\"data-question\");\n\n            var audio_blob = currAudioBlob;//$(\"audio[data-question='\"+question_attr+\"'\").attr('src');\n\n\n\n            var dataPacket = new FormData();\n\n            dataPacket.append('question', $(\".question[data-question='\"+question_attr+\"'] p.question-str\").html());\n            dataPacket.append('question_id', question_attr.substring(8,9));\n\n            var response = $(\"#\"+question_attr).val();\n            if (response == undefined) { response = '50'; }\n            dataPacket.append('response', response);\n\n\n            var question_care = $(\"#\"+question_attr+\"_care\").val();\n            if (question_care == undefined) { question_care = '50'; }            \n            dataPacket.append('strength', question_care);\n\n\n            dataPacket.append('csrf_token', $('meta[name=\"csrf_token\"]').attr('content'));\n            var name = ($(\"#name-input\").val().length == 0) ? \"No name given\" : $(\"#name-input\").val();\n            dataPacket.append('name', name);\n            var email = ($(\"#email-input\").val().length == 0) ? \"No@email.address\" : $(\"#email-input\").val();\n            dataPacket.append('email', email);\n            console.log(audio_blob);\n            dataPacket.append('audio_name', moment().format('x')+\"_audio.wav\");\n            dataPacket.append('audio_file', audio_blob);\n\n            // var dataPacket = {\n            //     'timestamp': moment().format('MM/DD/YYYY HH:mm:ss a'),\n            //     'question': $(\".question[data-question='\"+question_attr+\"'] p.question-str\").html(),\n            //     'question_id': question_attr.substring(8,9),\n            //     'response': $(\"#\"+question_attr).val(),\n            //     'strength': $(\"#\"+question_attr+\"_care\").val(),\n            //     'audio_file': audio_blob,\n            //     'name': $(\"#name-input\").val(),\n            //     'email': $(\"#email-input\").val()\n            // };\n\n            console.log(dataPacket);\n\n\n            $.ajax({\n                url: '/submit',\n                type: 'POST',\n                dataType: 'json',\n                data: dataPacket,\n                processData: false,\n                contentType: false\n               \n            })\n            .done(function(data, status, xhr) {\n                console.log(\"SUCCESS\");\n                console.log(\"data\", data);\n                console.log(\"status\", status);\n                console.log(\"xhr\", xhr);\n                console.log(\"-----------\");\n            })\n            .fail(function() {\n                console.log(\"error\");\n            })\n            .always(function(xhr, status) {\n                console.log(\"COMPLETE\");\n                console.log(\"status\", status);\n                console.log(\"xhr\", xhr);\n                console.log(\"-----------\");\n            });\n\n\n    \n        }\n\n\n        if( $(\".deck-next\").hasClass('autoplay')) {\n            setTimeout(function(){\n                if ( $(\".deck-current\").hasClass('autoplay') ){\n                    $.deck('next'); \n                }\n            }, 1200);\n        }\n\n        if( $(\".deck-next\").hasClass('done')) {\n            setTimeout(function(){\n                if ( $(\".deck-current\").hasClass('done') ){\n                    \n                    window.location.href = \"/\";\n                }\n            }, 5200);\n        }\n\n\t});\n\n\n\n    //todo - turn off arrow listeners on slideshow\n    //todo - hammerjs that ish\n\n\n    /////////////\n    // record stuff\n    /////////\n\n    try {\n      // webkit shim\n      window.AudioContext = window.AudioContext || window.webkitAudioContext;\n      navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia;\n      window.URL = window.URL || window.webkitURL;\n      \n      audio_context = new AudioContext;\n\n      __log('Audio context set up.');\n      __log('navigator.getUserMedia ' + (navigator.getUserMedia ? 'available.' : 'not present!'));\n    } catch (e) {\n        console.log(\"e: \", e)\n    }\n    \n    navigator.getUserMedia({audio: true}, startUserMedia, function(e) {\n      console.log('No live audio input: ', e);\n    });\n\n\n\n\n\n\n  function __log(e, data) {\n    console.log(e + \" \" + (data || ''));\n  }\n\n  var audio_context;\n  var recorder;\n  var recording=false;\n\n  function startUserMedia(stream) {\n    var input = audio_context.createMediaStreamSource(stream);\n    __log('Media stream created.');\n\n    // Uncomment if you want the audio to feedback directly\n    //input.connect(audio_context.destination);\n    //__log('Input connected to audio context destination.');\n    \n    recorder = new Recorder(input);\n    __log('Recorder initialised.');\n  }\n\nfunction toggleRecord(ev){\n    var btn = $(ev.target);\n    var spanverbiage = $(ev.target).parent().children('span').first();\n         if(btn.hasClass('notRec')){\n\n                 btn.removeClass(\"notRec\");\n                 btn.addClass(\"Rec\");\n                 // start recording now!\n                 spanverbiage.html(\"Stop\");\n                 recording = true;\n                 recorder && recorder.record();\n\n                 __log('Recording...');\n             } else {\n                 btn.removeClass(\"Rec\");\n                 btn.addClass(\"notRec\");\n\n                 spanverbiage.html(\"Re-Record\");\n\n                  // stop\n                 recording = false;\n                 recorder && recorder.stop();\n\n                 __log('Stopped recording.');\n                 // create WAV download link using audio data blob\n                 submitOrRerecord();\n\n             }\n\n     }\n\n  //  var recordButton = $('.recorder-button button');\n   //   // record button clickers\n     // recordButton.each(function(){\n     //     var $this = $(this);\n     //     var $spanVerbiage = $(this).parent().find('span').first();\n     //     var mc = new Hammer(this);\n     //     mc.on(\"tap\", function() {\n     //         if($this.hasClass('notRec')){\n\n     //             $this.removeClass(\"notRec\");\n     //             $this.addClass(\"Rec\");\n     //             // start recording now!\n     //             $spanVerbiage.html(\"Stop\");\n     //             recording = true;\n     //             recorder && recorder.record();\n\n     //             __log('Recording...');\n     //         } else {\n     //             $this.removeClass(\"Rec\");\n     //             $this.addClass(\"notRec\");\n\n     //             $spanVerbiage.html(\"Re-Record\");\n\n     //              // stop\n     //             recording = false;\n     //             recorder && recorder.stop();\n\n     //             __log('Stopped recording.');\n     //             // create WAV download link using audio data blob\n     //             submitOrRerecord();\n\n     //         }\n     //     });\n     // });\n\n\n\n  function submitOrRerecord() {\n    console.log(\"hey man!\");\n    console.log(recorder);\n\n    recorder && recorder.exportWAV(function(blob) {\n      currAudioBlob = blob;\n      console.log(\"audio blob!\");\n\n      var thisQuestion = $(\".record.deck-current\").attr('data-question');\n\n      var sound_url = URL.createObjectURL(currAudioBlob);\n      var audio_elt = document.createElement('audio');\n      audio_elt.controls = true;\n      audio_elt.src = sound_url;\n      audio_elt.setAttribute('data-question', $(\".record\").attr('data-question'));\n\n      console.log(thisQuestion);\n      var currQuestionsPlayer = $(\".record[data-question='\"+thisQuestion+\"'] .playMostRecent\");\n      currQuestionsPlayer.html(\"\");\n      currQuestionsPlayer.append( $(audio_elt) );\n     // currQuestionsPlayer.append($(audio_link));\n\n      currQuestionsPlayer.find(\"audio\").attr(\"data-question\", thisQuestion);\n\n\n      $(\".deck-current.record button.next\").removeClass(\"hidden\");\n\n        recorder.clear();\n\n    });\n  }\n\n\n\n\n});*///# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }
/******/ ]);